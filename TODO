High Priority:
TEST: test output parameter as a pointer to a structure
TEST: test input parameter as a pointer to a structure

FUNCTION: type definition add count e.g. int[3] means int * 3 : wow you can do sizeof(int[3])
TEST: test input parameter as a POD array
TEST: test output parameter as a POD array
TEST: test input parameter as a structure array
TEST: test output parameter as a structure array
TEST: test POD array as member in a struct
TEST: test struct array as member in a struct

Medium Priority:
FUNCTION: error handling run out of memory when adding new function or new type e.g. array limit reached

FUNCTION: what about references? Treat them as pointers :)

CORE: error handling run out of memory when adding new string e.g. array limit reached
CORE: need common error handling & log system

LES: need good debugging ability for the packets before sent and at server end
LES: send packet data to server?

Low Priority:
FUNCTION: what about supporting references?
MACROS: WORK OUT HOW TO DO THE RETURN VALUE IN MACROS
MACROS: WORK OUT HOW TO DO THE ERROR HANDLING 

FUNCTION: how will output parameters work? Do they need to be sent to the server (yes i.e. in/out params)

CORE: memory management for input & output parameter blocks per function
CORE: hash table with binary search

LES: need to list the data storage that is required by the global data
LES: server send global test data instead of building it internally?
LES: might want to save ptr values for later instead of taking the value from them?????????????

