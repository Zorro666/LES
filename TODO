High Priority:
SERVER: string table and hashing function in python
SERVER: Load and parse XML definition file for Types
SERVER: generate string table and type data as binary block from XML file -> chunked data structure with array of offsets i.e. string table offset, type data offset, struct data offset, function data offset etc. (simple enum per data chunk type)

SERVER: Up and running ready for client to connect
CLIENT: Connect to server

CLIENT: use binary version of string table and type data from over the network
SERVER: add structs, function defintiions to binary data and XML parsing
CLIENT: use binary version of definition data

SERVER: at some point test and implement endian swapping for the binary data
CLIENT: test endian swapped binary data

CLIENT: send function data to server as network message
SERVER: process function data send response
CLIENT: support for async function calls, error queue, potential threading issues
SERVER: support for async function calls, error queue

Medium Priority:
FUNCTION: error handling run out of memory when adding new function or new type e.g. array limit reached

CORE: error handling run out of memory when adding new string e.g. array limit reached

LES: need good debugging ability for the packets before sent and at server end
LES: send packet data to server?

Low Priority:
MACROS: WORK OUT HOW TO DO THE RETURN VALUE IN MACROS
MACROS: WORK OUT HOW TO DO THE ERROR HANDLING 

FUNCTION: how will output parameters work? Do they need to be sent to the server (yes i.e. in/out params)

CORE: memory management for input & output parameter blocks per function
CORE: hash table with binary search

LES: need to list the data storage that is required by the global data
LES: server send global test data instead of building it internally?
LES: might want to save ptr values for later instead of taking the value from them?????????????

FEATURE: make pod types alias to byte[sizeOfDataType], so byte is the final base pure type, waste of CPU cycles
