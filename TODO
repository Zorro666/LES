High Priority:
CORE: use loaded definitions first then use the global data - have single static global definition file ptr to use
CORE: C++ API/classes to use the chunked data file, switch the type data system to use it, use file 1st, fallback to global in the interim
CORE: fixed size typedefs: int64, uint64, float32

Medium Priority:
STRUCT: the struct size shouldn't be required -C++ set it to 0 and see what happens
SERVER: up and running ready for client to connect
CLIENT: connect to server

CLIENT: use binary version of string table and type data from over the network
SERVER: add structs, function defintiions to binary data and XML parsing
CLIENT: use binary version of definition data

SERVER: at some point test and implement endian swapping for the binary data
CLIENT: test endian swapped binary data

CLIENT: send function data to server as network message
SERVER: process function data send response
CLIENT: support for async function calls, error queue, potential threading issues
SERVER: support for async function calls, error queue

LES_TYPEDATA.PY: in the future have a global params block e.g. pointer data size default

FUNCTION: error handling run out of memory when adding new function or new type e.g. array limit reached

CORE: error handling run out of memory when adding new string e.g. array limit reached

LES: need good debugging ability for the packets before sent and at server end
LES: send packet data to server?

Low Priority:
MACROS: WORK OUT HOW TO DO THE RETURN VALUE IN MACROS
MACROS: WORK OUT HOW TO DO THE ERROR HANDLING 

FUNCTION: how will output parameters work? Do they need to be sent to the server (yes i.e. in/out params)

CORE: memory management for input & output parameter blocks per function
CORE: hash table with binary search

LES: need to list the data storage that is required by the global data
LES: server send global test data instead of building it internally?
LES: might want to save ptr values for later instead of taking the value from them?????????????

