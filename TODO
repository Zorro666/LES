High Priority:
HMMMMMMM: should arrays be aliased to their base type - makes moving handling the pointer parameter easier
HMMMMMMM: should arrays be aliased to their base type pointer - can't decide which is best
TYPE: array types need to be handled in ComputeDataStorageSize()

FEATURE: type definition add count e.g. int[3] means int * 3 : wow you can do sizeof(int[3])
FEATURE: make pod types alias to byte[sizeOfDataType], so byte is the final base pure type
TEST: test input parameter as a POD array
TEST: test output parameter as a POD array
TEST: test input parameter as a structure array
TEST: test output parameter as a structure array
TEST: test input parameter as a reference array
TEST: test output parameter as a reference array
TEST: test POD array as member in a struct
TEST: test struct array as member in a struct
TEST: test POD reference array as member in a struct
TEST: test struct reference array as member in a struct

Medium Priority:
FUNCTION: error handling run out of memory when adding new function or new type e.g. array limit reached

CORE: error handling run out of memory when adding new string e.g. array limit reached

LES: need good debugging ability for the packets before sent and at server end
LES: send packet data to server?

Low Priority:
MACROS: WORK OUT HOW TO DO THE RETURN VALUE IN MACROS
MACROS: WORK OUT HOW TO DO THE ERROR HANDLING 

FUNCTION: how will output parameters work? Do they need to be sent to the server (yes i.e. in/out params)

CORE: memory management for input & output parameter blocks per function
CORE: hash table with binary search

LES: need to list the data storage that is required by the global data
LES: server send global test data instead of building it internally?
LES: might want to save ptr values for later instead of taking the value from them?????????????

